#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (-421.15972904483795, 249.72483637479016, 179.89149167583838)
                double3 target = (35.94480782502791, 108.87244410407655, 6.311755041596484)
            }
            dictionary Right = {
                double3 position = (-50000, 0, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 50000, 0)
                double radius = 500
            }
            string boundCamera = "/DarkSmoke/Backdrop/LongView"
        }
        dictionary renderSettings = {
            bool "rtx:flow:enabled" = 1
            bool "rtx:flow:pathTracingEnabled" = 1
            bool "rtx:flow:rayTracedReflectionsEnabled" = 1
            bool "rtx:flow:rayTracedTranslucencyEnabled" = 1
            double "rtx:hydra:points:defaultWidth" = 1
        }
        dictionary xrSettings = {
            token "xrstage:profile:tabletar:anchorMode" = "scene origin"
            token "xrstage:profile:tabletar:cameraOutputPath" = ""
            token "xrstage:profile:tabletar:customAnchor" = ""
            bool "xrstage:profile:tabletar:enableCameraOutput" = 0
            bool "xrstage:profile:tabletar:overrideScaleEnabled" = 0
            float "xrstage:profile:tabletar:overrideScaleFactor" = 0.01
        }
    }
    defaultPrim = "DarkSmoke"
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "DarkSmoke"
{
    token visibility = "inherited"

    def FlowEmitterSphere "flowEmitterSphere"
    {
        custom float allocationScale = 1
        custom bool applyPostPressure = 0
        custom float burn = 0
        custom float coupleRateBurn = 0
        custom float coupleRateDivergence = 0
        float coupleRateFuel = 2
        float coupleRateSmoke = 2
        float coupleRateTemperature = 2
        float coupleRateVelocity = 100
        custom float divergence = 0
        custom bool enabled = 1
        float fuel = 4
        int layer = 0
        custom bool multisample = 0
        custom uint numSubSteps = 1
        custom float physicsVelocityScale = 0
        custom float3 position = (0, 0, 0)
        float radius = 5
        custom bool radiusIsWorldSpace = 1
        float smoke = 10
        float temperature = 10
        float3 velocity = (0, 400, 0)
        custom bool velocityIsWorldSpace = 0
    }

    def FlowSimulate "flowSimulate"
    {
        custom uint blockMinLifetime = 4
        float densityCellSize = 1
        custom bool enableLowPrecisionDensity = 0
        custom bool enableLowPrecisionVelocity = 0
        custom bool enableSmallBlocks = 0
        custom bool enableVariableTimeStep = 0
        custom bool forceClear = 0
        custom bool forceDisableCoreSimulation = 0
        custom bool forceDisableEmitters = 0
        custom bool forceSimulate = 0
        custom bool interpolateTimeSteps = 0
        int layer = 0
        custom uint maxStepsPerSimulate = 1
        custom bool physicsCollisionEnabled = 0
        custom bool physicsConvexCollision = 1
        custom bool simulateWhenPaused = 0
        custom float stepsPerSecond = 60
        custom float timeScale = 1
        custom uint velocitySubSteps = 1

        def FlowAdvectionCombustionParams "advection"
        {
            custom float buoyancyMaxSmoke = 1
            custom float buoyancyPerSmoke = 0
            float buoyancyPerTemp = 10
            custom float burnPerTemp = 4
            custom bool combustionEnabled = 1
            custom float coolingRate = 1.5
            float divergencePerBurn = 4
            custom bool downsampleEnabled = 1
            custom bool enabled = 1
            custom bool forceFadeEnabled = 0
            custom float fuelPerBurn = 0.25
            custom bool globalFetch = 0
            float3 gravity = (0, -100, 0)
            custom float ignitionTemp = 0.05
            custom float smokePerBurn = 3
            custom float tempPerBurn = 5

            def FlowAdvectionChannelParams "velocity"
            {
                custom float damping = 0.01
                custom float fade = 1
                float secondOrderBlendFactor = 0.5
                custom float secondOrderBlendThreshold = 0.001
            }

            def FlowAdvectionChannelParams "temperature"
            {
                custom float damping = 0
                custom float fade = 0
                float secondOrderBlendFactor = 0.5
                custom float secondOrderBlendThreshold = 0.001
            }

            def FlowAdvectionChannelParams "fuel"
            {
                custom float damping = 0
                custom float fade = 0
                float secondOrderBlendFactor = 0.5
                custom float secondOrderBlendThreshold = 0.001
            }

            def FlowAdvectionChannelParams "smoke"
            {
                custom float damping = 0.3
                float fade = 0.4
                float secondOrderBlendFactor = 0.5
                custom float secondOrderBlendThreshold = 0.001
            }

            def FlowAdvectionChannelParams "divergence"
            {
                custom float damping = 0.01
                custom float fade = 1
                custom float secondOrderBlendFactor = 0.5
                custom float secondOrderBlendThreshold = 0.001
            }

            def FlowAdvectionChannelParams "burn"
            {
                custom float damping = 0
                custom float fade = 0
                custom float secondOrderBlendFactor = 0.9
                custom float secondOrderBlendThreshold = 0.001
            }
        }

        def FlowVorticityParams "vorticity"
        {
            custom float burnMask = 0
            float constantMask = 0.5
            custom float densityMask = 0
            custom bool enabled = 1
            float forceScale = 2.8
            custom float fuelMask = 0
            custom float smokeMask = 0
            custom float temperatureMask = 0
            custom float velocityLinearMask = 0
            custom float velocityLogScale = 1
            custom float velocityMask = 1
        }

        def FlowPressureParams "pressure"
        {
            custom bool enabled = 1
        }

        def FlowSummaryAllocateParams "summaryAllocate"
        {
            custom bool enableNeighborAllocation = 1
            custom float smokeThreshold = 0.02
            custom float speedThreshold = 1
            custom float speedThresholdMinSmoke = 0
        }

        def FlowSparseNanoVdbExportParams "nanoVdbExport"
        {
            custom bool burnEnabled = 0
            custom bool divergenceEnabled = 0
            custom bool enabled = 0
            custom bool fuelEnabled = 0
            custom bool readbackClearOnStart = 1
            custom bool readbackClearOnStop = 1
            custom asset readbackDirectory = @@
            custom bool readbackEnabled = 0
            custom rel readbackMaterial
            custom bool readbackOpenVDB = 1
            custom bool smokeEnabled = 1
            custom bool statisticsEnabled = 1
            custom bool temperatureEnabled = 0
            custom bool velocityEnabled = 0
        }
    }

    def FlowOffscreen "flowOffscreen"
    {
        int layer = 0

        def FlowShadowParams "shadow"
        {
            float attenuation = 0.5
            custom bool coarsePropagate = 1
            custom bool enabled = 1
            custom bool isPointLight = 0
            float3 lightDirection = (-1, 1, 1)
            custom float3 lightPosition = (0, 0, 0)
            custom float minIntensity = 0.125
            custom uint numSteps = 16
            custom float stepOffsetScale = 1
            custom float stepSizeScale = 0.75
        }

        def FlowRayMarchColormapParams "colormap"
        {
            custom float colorScale = 2.5
            custom float[] colorScalePoints = [1, 1, 1, 1, 1, 1]
            custom uint resolution = 32
            float4[] rgbaPoints = [(0.0154, 0.0177, 0.0154, 0.004902), (0.1, 0.1, 0.1, 0.504902), (0.1, 0.1, 0.1, 0.504902), (0.1, 0.1, 0.1, 0.8), (0.1, 0.1, 0.1, 0.8), (0.1, 0.1, 0.1, 0.7)]
            custom float[] xPoints = [0, 0.05, 0.15, 0.6, 0.85, 1]
        }

        def FlowDebugVolumeParams "debugVolume"
        {
            custom bool enableSpeedAsTemperature = 0
            custom bool enableVelocityAsDensity = 0
            custom float3 velocityScale = (0.01, 0.01, 0.01)
        }
    }

    def FlowRender "flowRender"
    {
        int layer = 0

        def FlowRayMarchParams "rayMarch"
        {
            float attenuation = 0.5
            custom float colorScale = 1
            custom bool enableBlockWireframe = 0
            custom bool enableRawMode = 0
            custom float shadowFactor = 1
            custom float stepSizeScale = 0.75

            def FlowRayMarchCloudParams "cloud"
            {
                custom float3 ambientColor = (0.4, 0.55, 0.9)
                custom float ambientMultiplier = 1
                custom float3 attenuationMultiplier = (1, 1, 1)
                custom float densityMultiplier = 0.5
                custom bool enableCloudMode = 0
                custom int numShadowSteps = 10
                custom float shadowStepMultiplier = 1
                custom float3 sunDirection = (1, 1, 1)
                custom float3 volumeBaseColor = (1.1, 1, 0.95)
                custom float volumeColorMultiplier = 1
            }
        }
    }

    def "Backdrop" (
        instanceable = false
        prepend payload = @./environment/Backdrop.usd@
    )
    {
        float3 xformOp:rotateXYZ = (0, -90, -90)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }
}

